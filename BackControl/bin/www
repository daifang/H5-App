#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backcontrol:server');
var http = require('http');
var pg = require('pg');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var pgdb = new pg.Pool({
  host: '127.0.0.1',
  port: 5432,
  user: 'suhuijun',
  password: '147852369',
  database: 'ACG'
});
function delunActive(){
  let sqlStr = "SELECT * FROM users WHERE status = '未激活'";
  pgdb.query(sqlStr,[],(err,val)=>{
      if(err){
          console.log(err.message);
      }else{
          let sqlStr_del = "DELETE FROM users WHERE id=$1";
          for(let i = 0;i<val.rowCount;i++){
              pgdb.query(sqlStr_del,[val.rows[i].id],(err,val)=>{
                if(err){
                    console.log(err.message);
                }else{
                    console.log('数据库已自动整理');
                }
              })
          }
      }
  })
}
function ac_num(){
  let date = new Date();
  if(date.getHours == '00'){

  }
  let json = {
    num:'0'
  }
  let str = JSON.stringify(json);
  fs.writeFileSync('../public/active.json',str);
}
setInterval(()=>{
  delunActive();
  ac_num();
},360000);

